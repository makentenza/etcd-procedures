---
- name: Get facts from existing etcd Nodes
  hosts: etcd
  gather_facts: True

#- name: Set some facts from existing etcd Node members
#  hosts: etcd

#  tasks:

#    - debug:
#        msg: "The etcd version is {{ ansible_local.openshift.etcd.etcd_image }}"
#      when: inventory_hostname == play_hosts[0]

- name: Configure and deploy etcd in new Node(s)
  hosts: new_etcd
  vars:
    etcd_version: "{{ hostvars[groups['etcd'][0]]['ansible_local']['openshift']['etcd']['etcd_image'] }}"

  tasks:

    - name: Deploy etcd - Ensure IPTABLES rules for etcd are applied
      iptables:
        chain: OS_FIREWALL_ALLOW
        ctstate: NEW
        destination_port: "{{ item }}"
        protocol: tcp
        jump: ACCEPT
      with_items:
        - 2379
        - 2380

    - name: Deploy etcd - Ensure IPTABLES rules are persistent
      lineinfile:
        dest: /etc/sysconfig/iptables
        state: present
        line: -A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport {{ item }} -j ACCEPT
        insertbefore: "^COMMIT"
        backup: yes
      with_items:
        - 2379
        - 2380

    - name: Deploy etcd - Ensure etcd directory structure exists
      file:
        state: directory
        dest: "{{ item }}"
        setype: svirt_sandbox_file_t
      with_items:
        - /etc/etcd
        - /var/lib/etcd

    - name: Deploy etcd - Ensure etcd_container systemd service exists and is enabled
      template:
        src: templates/etcd_container.service.j2
        dest: /etc/systemd/system/etcd_container.service
        owner: root
        group: root
        mode: 0644

    - name: Deploy etcd - Ensure etcd_container service is enabled and stopped
      systemd:
        daemon_reload: yes
        enabled: yes
        name: etcd_container.service
        state: stopped

# Remove this --- Just for granular testing
- hosts: new_etcd
  gather_facts: True

- name: Add new etcd Node(s) to the existing Cluster
  hosts: etcd

  tasks:

    - name: Ensure certificate directories for new etcd Node(s) exist
      file:
        state: directory
        dest: /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}
      with_items:
        - "{{ groups['new_etcd'] }}"
      when: inventory_hostname == play_hosts[0]

    - name: Create server.csr and server.key
      command: openssl req -new -keyout /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/server.key -config /etc/etcd/ca/openssl.cnf -out /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/server.csr -reqexts etcd_v3_req -batch -nodes -subj /CN={{ hostvars[item]['ansible_nodename'] }}
      environment:
        SAN: IP:{{ hostvars[item]['ansible_default_ipv4']['address'] }}
      with_items:
        - "{{ groups['new_etcd'] }}"
      when: inventory_hostname == play_hosts[0]

    - name: Create server.crt
      command: openssl ca -name etcd_ca -config /etc/etcd/ca/openssl.cnf -out /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/server.crt -in /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/server.csr -extensions etcd_v3_ca_server -batch
      environment:
        SAN: IP:{{ hostvars[item]['ansible_default_ipv4']['address'] }}
      with_items:
        - "{{ groups['new_etcd'] }}"
      when: inventory_hostname == play_hosts[0]

    - name: Create peer.csr and peer.key
      command: openssl req -new -keyout /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/peer.key -config /etc/etcd/ca/openssl.cnf -out /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/peer.csr -reqexts etcd_v3_req -batch -nodes -subj /CN={{ hostvars[item]['ansible_nodename'] }}
      environment:
        SAN: IP:{{ hostvars[item]['ansible_default_ipv4']['address'] }}
      with_items:
        - "{{ groups['new_etcd'] }}"
      when: inventory_hostname == play_hosts[0]

    - name: Create peer.crt
      command: openssl ca -name etcd_ca -config /etc/etcd/ca/openssl.cnf -out /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/peer.crt -in /etc/etcd/generated_certs/etcd-{{ hostvars[item]['ansible_nodename'] }}/peer.csr -extensions etcd_v3_ca_server -batch
      environment:
        SAN: IP:{{ hostvars[item]['ansible_default_ipv4']['address'] }}
      with_items:
        - "{{ groups['new_etcd'] }}"
      when: inventory_hostname == play_hosts[0]

#==== From one of the existing etcd Nodes do the following

    # cd /etc/etcd
    # export NEW_ETCD="{new etcd node FQDN hostname}"
    # export CN=$NEW_ETCD
    # export SAN="IP:$(dig +short A $NEW_ETCD)"
    # export PREFIX="./generated_certs/etcd-$CN/"
    # mkdir $PREFIX

    # openssl req -new -keyout ${PREFIX}server.key -config ca/openssl.cnf -out ${PREFIX}server.csr -reqexts etcd_v3_req -batch -nodes -subj /CN=$CN
    # openssl ca -name etcd_ca -config ca/openssl.cnf -out ${PREFIX}server.crt -in ${PREFIX}server.csr -extensions etcd_v3_ca_server -batch

    # openssl req -new -keyout ${PREFIX}peer.key -config ca/openssl.cnf -out ${PREFIX}peer.csr -reqexts etcd_v3_req -batch -nodes -subj /CN=$CN
    # openssl ca -name etcd_ca -config ca/openssl.cnf -out ${PREFIX}peer.crt -in ${PREFIX}peer.csr -extensions etcd_v3_ca_peer -batch

    # cp ca.crt ${PREFIX}
    # cp etcd.conf ${PREFIX}
    # tar -czvf ${PREFIX}${CN}.tgz -C ${PREFIX} .

    # scp ${PREFIX}${CN}.tgz  $CN:/etc/etcd/

    # export ETCD_CA_HOST="$(hostname)"
    # export NEW_ETCD_IP="$(dig +short A $NEW_ETCD)"
    # docker exec -it etcd_container etcdctl -C https://${ETCD_CA_HOST}:2379 --ca-file=/etc/etcd/ca.crt --cert-file=/etc/etcd/peer.crt --key-file=/etc/etcd/peer.key member add ${NEW_ETCD} https://${NEW_ETCD_IP}:2380 > /etc/etcd/${NEW_ETCD}.added
    # scp /etc/etcd/${NEW_ETCD}.added $CN:/etc/etcd/
